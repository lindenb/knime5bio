<?xml version="1.0" encoding="UTF-8"?>
<generate-code>

<node name="vcfhead" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.misc.VcfHead">
	<initialize>
	instance.setCount(this.getPropertyNumberOfLinesValue());
	</initialize>
</node>


<node name="vcftail" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.misc.VcfTail">
	<initialize>
	instance.setCount(this.getPropertyNumberOfLinesValue());
	</initialize>
</node>


<node name="vcffilterjs" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.vcffilterjs.VCFFilterJS">
	<initialize>
	instance.setScriptExpression(this.getPropertyJavascriptValue());
	if( instance.initializeKnime() != 0)
		{
		throw new RuntimeException("Cannot initialize VCFFilterJS. Check java engine and script syntax");
		}
	</initialize>
</node>

<node name="vcffilterso" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.misc.VcfFilterSequenceOntology">
	<initialize>
  		instance.setInverseResult(super.isPropertyInverseSelectionValue());
  		instance.setReasoning(super.isPropertyEnableReasoningValue());
  		for(String acn: this.getPropertyTermsValue().split("[ ,\n\t]"))
  			{
  			instance.addTerm(acn);
  			}
  		if( instance.initializeKnime() != 0)
			{
			throw new RuntimeException("Cannot initialize vcffilterso");
			}
	</initialize>
</node>



<node name="vcfgo" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.vcfgo.VcfGeneOntology">
	<initialize>
		
			instance.setGeneOntologyUrl(this.getPropertyGoUrlValue());
			instance.setGeneOntologyAnnotationUrl(this.getPropertyGoaUrlValue());
			instance.setRemoveIfNoGo(this.isPropertyRemoveIfNoGoValue());
			instance.setInverseFilter(this.isPropertyInverseFilterValue());
			
			
			if(this.getPropertyFilterNameValue().trim().isEmpty())
				{
				instance.setFilterName(this.getPropertyFilterNameValue().trim());
				}
			
	  		for(String acn: this.getPropertyGoTermsValue().split("[ ,\n\t]"))
	  			{
	  			if(acn.isEmpty()) continue;
	  			instance.addGoTerm(acn);
	  			}
			if( instance.initializeKnime() != 0)
				{
				throw new RuntimeException("Cannot initialize vcfgo");
				}
	</initialize>
</node>


<node name="vcftrio" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.vcftrios.VCFTrios">
	<initialize>
			instance.setCreateFilter(this.isPropertyFilterValue());
			instance.setPedigreeURI(this.getPropertyPedigreeValue());
			if( instance.initializeKnime() != 0)
				{
				throw new RuntimeException("Cannot initialize");
				}

	</initialize>
</node>

<node name="vcfcutsamples" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.misc.VcfCutSamples">
	<initialize>
			instance.setMissingSampleIsError(this.isPropertyMissingIsErrorValue());
			instance.setInvert(this.isPropertyInverseValue());
			instance.setRemoveCtxIfNoCall(this.isPropertyRemoveCtxIfNoCallValue());
			for(String S: this.getPropertySamplesValue().split("[ ,\n\t]"))
	  			{
	  			if(S.isEmpty()) continue;
	  			instance.getUserSamples().add(S);
	  			}
			if( instance.initializeKnime() != 0)
				{
				throw new RuntimeException("Cannot initialize");
				}

	</initialize>
</node>



<node name="vcfbigwig" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.vcfbigwig.VCFBigWig">
	<initialize>
			instance.setBiwWigFile(this.getPropertyBigWigValue());
			instance.setTag(this.getPropertyVcftagValue());
			instance.setContained(this.isPropertyContainedValue());

			if( instance.initializeKnime() != 0)
				{
				throw new RuntimeException("Cannot initialize");
				}

	</initialize>
</node>

<node name="vcfbed" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.vcfbed.VCFBed">
	<initialize>
			instance.setBedFile(new java.io.File(this.getPropertyBedfileValue()));
			instance.setFormat(this.getPropertyFormatValue());
			instance.setTag(this.getPropertyInfotagValue());

			if( instance.initializeKnime() != 0)
				{
				throw new RuntimeException("Cannot initialize");
				}

	</initialize>
</node>

<node name="vcfpolyx" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.misc.VCFPolyX">
	<initialize>
			instance.setReference(new java.io.File(this.getPropertyFastaFaidxValue()));
			if( instance.initializeKnime() != 0)
				{
				throw new RuntimeException("Cannot initialize");
				}


	</initialize>
</node>

<node name="vcfcadd" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.misc.VcfCadd">
	<initialize>
			instance.setCcaduri(this.getPropertyCadduriValue());
			if( instance.initializeKnime() != 0)
				{
				throw new RuntimeException("Cannot initialize");
				}
	</initialize>
</node>

<node name="vcfindextabix" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.misc.VcfIndexTabix">
	<initialize>
			instance.setMaxRecordsInRam(this.getPropertyMaxRecordsinRamValue());
			instance.setSort(this.isPropertySortValue());
			if( instance.initializeKnime() != 0)
				{
				throw new RuntimeException("Cannot initialize");
				}
	</initialize>
</node>

<node name="vcfmulti2oneallele" type="vcf-filter" handler-class="com.github.lindenb.jvarkit.tools.misc.VcfMultiToOneAllele">
	<initialize>
			if( instance.initializeKnime() != 0)
				{
				throw new RuntimeException("Cannot initialize");
				}
	</initialize>
</node>



</generate-code>
